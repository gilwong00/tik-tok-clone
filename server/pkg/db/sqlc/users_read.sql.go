// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users_read.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
	id,
	first_name,
	last_name,
	email,
	password,
	avatar_uri,
	created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        int64          `json:"id"`
	FirstName string         `json:"firstName"`
	LastName  string         `json:"lastName"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	AvatarUri sql.NullString `json:"avatarUri"`
	CreatedAt time.Time      `json:"createdAt"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.AvatarUri,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
	id,
	first_name,
	last_name,
	email,
	avatar_uri,
	created_at FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        int64          `json:"id"`
	FirstName string         `json:"firstName"`
	LastName  string         `json:"lastName"`
	Email     string         `json:"email"`
	AvatarUri sql.NullString `json:"avatarUri"`
	CreatedAt time.Time      `json:"createdAt"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AvatarUri,
		&i.CreatedAt,
	)
	return i, err
}

const searchUsers = `-- name: SearchUsers :many
WITH unique_users AS (
	SELECT id, first_name, last_name, email, password, avatar_uri, created_at, updated_at, ts FROM users
	WHERE id <> $1
)
SELECT
	id,
	first_name,
	last_name,
	email,
	avatar_uri,
	created_at
FROM unique_users
WHERE ts @@ to_tsquery('english', $2)
ORDER BY ts_rank(ts, to_tsquery('english', $2)) DESC
`

type SearchUsersParams struct {
	ID        int64  `json:"id"`
	ToTsquery string `json:"toTsquery"`
}

type SearchUsersRow struct {
	ID        int64          `json:"id"`
	FirstName string         `json:"firstName"`
	LastName  string         `json:"lastName"`
	Email     string         `json:"email"`
	AvatarUri sql.NullString `json:"avatarUri"`
	CreatedAt time.Time      `json:"createdAt"`
}

func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]SearchUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, arg.ID, arg.ToTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchUsersRow{}
	for rows.Next() {
		var i SearchUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.AvatarUri,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
